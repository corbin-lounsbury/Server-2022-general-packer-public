# This is my personal workflow that executes in my lab environment. Feel free to use this as a base should you want to do something similar.

name: Template Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    paths:
      - 'win2022.core/**'
      - 'win2022.gui/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:
  build-2022GUI:
    runs-on: packer-windows
    steps:
    - uses: actions/checkout@v2
    - name: Build 2022 GUI template
      env:
        build_account: ${{ secrets.PKR_VCA_SVC_ACCT }}
        build_pw: ${{ secrets.PKR_VCA_SVC_ACCT_PW }}
        cluster: ${{ secrets.PKR_HOST_CLUSTER }}
        vcsa: ${{ secrets.PKR_VCA }}
        datacenter: ${{ secrets.PKR_VCA_DC }}
        datastore: ${{ secrets.PKR_DATASTORE }}
        network: ${{ secrets.PKR_VNET }}
        iso: ${{ secrets.PKR_ISO_PATH }}
        vmtools: ${{ secrets.PKR_VMTOOLS_ISO_PATH }}
      run: >
        packer build -force 
        -var 'vsphere-user="${{ env.build_account }}"' 
        -var 'vsphere-password="${{ env.build_pw }}"' 
        -var 'vsphere-server="${{ env.vcsa }}"' 
        -var 'vsphere-cluster="${{ env.cluster }}"' 
        -var 'vsphere-datacenter="${{ env.datacenter }}"' 
        -var 'vsphere-datastore="${{ env.datastore }}"' 
        -var 'vsphere-network="${{ env.network }}"' 
        -var 'os_iso_path="${{ env.iso }}"' 
        -var 'vmtools_iso_path="${{ env.vmtools }}"' 
        .\win2022.gui\
      # The above run call makes heavy use of masked secrets held in GitHub Actions. Substitute for your own variables or secrets

  build-2022Core:
    runs-on: packer-windows
    steps:
    - uses: actions/checkout@v2
    - name: Build 2022 core template
      env:
        build_account: ${{ secrets.PKR_VCA_SVC_ACCT }}
        build_pw: ${{ secrets.PKR_VCA_SVC_ACCT_PW }}
        cluster: ${{ secrets.PKR_HOST_CLUSTER }}
        vcsa: ${{ secrets.PKR_VCA }}
        datacenter: ${{ secrets.PKR_VCA_DC }}
        datastore: ${{ secrets.PKR_DATASTORE }}
        network: ${{ secrets.PKR_VNET }}
        iso: ${{ secrets.PKR_ISO_PATH }}
        vmtools: ${{ secrets.PKR_VMTOOLS_ISO_PATH }}
      run: >
        packer build -force 
        -var 'vsphere-user="${{ env.build_account }}"' 
        -var 'vsphere-password="${{ env.build_pw }}"' 
        -var 'vsphere-server="${{ env.vcsa }}"' 
        -var 'vsphere-cluster="${{ env.cluster }}"' 
        -var 'vsphere-datacenter="${{ env.datacenter }}"' 
        -var 'vsphere-datastore="${{ env.datastore }}"' 
        -var 'vsphere-network="${{ env.network }}"' 
        -var 'os_iso_path="${{ env.iso }}"' 
        -var 'vmtools_iso_path="${{ env.vmtools }}"' 
        .\win2022.core\
      # The above run call makes heavy use of masked secrets held in GitHub Actions. Substitute for your own variables or secrets

  Push2Public: #used to push from a private repo to a public one. Remove everything below this line if you don't want to use it. 
    needs: 
      - build-2022Core
      - build-2022GUI
    runs-on: packer-windows
    steps:
    - uses: actions/checkout@v2
    - name: Pushes to public
      env:
        github_pat: ${{ secrets.API_TOKEN_GITHUB }}
        public_repo: ${{ secrets.PUBLIC_REPO }}
        push_user: ${{ secrets.PUSH_USER }}
      run: .\clone-repo.ps1 -publicRepo "${{ env.public_repo }}" -gitToken "${{ env.github_pat }}" -gitUser "${{ env.push_user }}"